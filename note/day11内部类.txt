1.	内部类定义
2.	内部类优点
3.	内部类分类
1)	实例成员内部类
2)	静态成员内部类
3)	局部内部类
4)	匿名内部类
4.	lambda(java8)
1)	函数式接口
接口只能有一个抽象方法。可以有其他方法。
 
2)	语法
(参数)->{表达式};
 
5.	方法引用
lambda只是用一个方法。
//1.只调用一个方法，必须是类方法
		String[] arr = {"aa","bb","cc"};
		/*La1 la = (arrs)->{return Arrays.toString(arrs);};
		System.out.println(la.show(arr));*/
		/*La1 la = Arrays::toString;
		System.out.println(la.show(arr));*/
		
		//2.调用特定对象的实例方法
		/*La1 la = (str)->{return "aa".equals(str);};
		System.out.println(la.show("aa"));*/
		/*La1 la = "aa"::equals;
		System.out.println(la.show("aa"));*/
		//System.out::println;
		
		//3.对象的方法使用(str.length())
		/*La1 la = (str)->{return str.length();};
		System.out.println(la.show("aaa"));*/
		/*La1 la = String::length;
		System.out.println(la.show("aaa"));*/
		
		//4.调用构造器
		/*La1 la = ()->{return new Person1();};
		la.create().test();*/
		/*La1 la = Person1::new;
		la.create().test();*/
6.	匿名内部类和lambda区别
1)	lambda只能调用函数接口
匿名内部类可以是实现普通接口，抽象类，普通类
2)	lambda不能调用默认方法。
7.	多态
多态使用前提:继承(实现)基础之上
1)	使用
父类引用 => 子类对象
2)	使用场景
父类类型作为参数类型
 
父类类型作为返回值类型
 

1.	什么是内部类
声明在类内部的类
2.	内部类优点
1)	实现更好的封装，提升安全性
2)	弥补单继承缺陷
3.	内部分类
1)	成员内部类
a)	实例成员内部类
b)	静态成员内部类
2)	局部内部类
3)	匿名内部类
4.	实例成员内部类
1)	语法
 
2)	怎么创建内部类对象
 
3)	内部类和外部类互访
内部类可以直接访问外部类成员；
外部类访问内部类成员需要先创建对象。
4)	注意事项
不能直接声明静态内容
外部类的静态方法不能直接访问实例内部类的成员。
编译文件格式:outer$inner.class
        内部类访问外部类同名属性需要使用外部类对象访问
	     Outer.this.a
5.	静态成员内部类
1)	语法
 
2)	对象创建
 
3)	访问
内部类访问外部类的成员:
  实例成员内部类，需要使用对象.成员；
  静态成员内部类，只能访问静态的成员。
6.	局部内部类
1)	语法(代码块，方法之类{})
静态方法
 
实例方法
 
2)	创建对象
局部内部类只能在{}内部使用，在方法中创建
3)	注意内容
1.	静态方法中的内部类只能访问外部类的静态成员
2.	实例方法中的内部类可以访问静态成员和实例成员
3.	编译之后的文件：outer$ninner.class
4.	内部类访问局部变量:
 
7.	匿名内部类
1)	语法
 
2)	注意
a)	当子类只需要使用一次
b)	隐藏子类的名称
c)	必须实现或者继承一个类或者接口
d)	不能声明静态，构造方法，抽象内容
e)	同名问题可以使用不同父类的名称来实现不同的内容。
f)	回调操作(匿名内部类)。
  


