抽象类

只 约定了 类的抽象行为 ，没有具体的行为实现；

场合：
  1.不适合创建对象；
  2.通常都是 使用子类来创建对象；
  3.模板。

注意：
  1.抽象类 不能创建对象；
  2.抽象类 中 抽象方法 可以定义也可以不定义；
  3.普通子类 继承抽象类，必须 实现抽象父类中的
     所有抽象方法；（抽象子类除外）
  4.构造器不能是抽象的；
  5.abstract 不能和 private ,static ,final一起连用。

----------------------------------------------------
接口：

是一组规则和规范。

场合：
  实现 额外的附加的功能。

注意：
  1.接口不能创建对象；
  2.普通实现类 实现接口 必须实现接口中的所有 抽象方法。
    （抽象实现类除外）。
  3.类 可以 实现多个接口。
  4.接口之间可以继承，多继承。
  5.接口中 所有的成员 都是 public；
  6.public abstract 抽象方法；
  7.常量 public static final

-----------------------------------------------
接口 和 抽象类 的异同：
相同：
  1.都可以定义抽象方法；
  2.都不能创建对象；
  3.都需要 由子类 或实现类 继承实现 来使用；
  4.普通的子类 和实现类 必须 实现抽象父类 或 父接口
    中的所有 抽象方法。（抽象的子类和实现类除外）。

不同：
  1.抽象类是类，是个模板，是个半成品；
    子类 在 此模板基础上 修改 ，扩展。
  2.接口：
     规范，规则。
     实现类 只有 遵循这组 规则 才能 为其它用户
     提供 这些功能。
  3.子类 只能继承一个抽象类。
  4.实现类 可以 实现多少个接口；
  5.接口之间 可以多继承。

-----------------------------------------
多态
 一种物质多种形态。
 同一种引用类型 ，使用不同的实例执行不同的操作。


具备特点：
 1.重写；
 2.父类引用 -》 子类对象；
   接口引用 -》实现类对象；

多态功能：
  会屏蔽子类之间的差异，只能调用父类中定义的公共的内容。

-----------------------------------------
类型转换：
  1.向上类型转换
    子类 -》 父类
  2.向下 类型转换
    父类 -》 子类
    需要 强转
------------------------------------------
运算符：

 instanceof 
    计算 引用 属于 某个 类 或 接口类型。
     是 此类型 运算结果 为 true,否则 false;

-----------------------------------------------
类图：
类之间的关系：
UML

  - private
    默认
  # protected
  + public
  

 1.泛化
   继承

  代码：
      子类  extends 父类


2.实现
   类 和 接口
  代码：
     实现类 implements 接口

3.关联
  类 和类的关系
  拥有

  三种关系：
     （1） 一对一 
     （2） 一对多
     （3）多对多

  代码：
    成员变量

  
  1)聚集（聚合）
  体现类和类之间 是 整体 和局部的关系
  局部 离开 整体 是可以 独立存在的
  代码：
    成员变量

  2）组合
    整体 和 局部的关系；
    局部 离开 整体 不能独立存在。
   

4.依赖
 类和类之间  使用关系
 代码：
    参数：局部变量









  
  

   


































  


















