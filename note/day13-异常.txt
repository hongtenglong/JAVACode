日期：
 java.util.Date
      |
 java.sql:  Date ,Time,Timestamp
   

--------------------------------------

格式化：

              Format
                 |
NumberFormat        DateFormat
    |                   |
DecimalFormat      SimpleDateFormat   



-----------------------------------------
Calendar日历 的使用


-------------------------------------------
Throwable异常和错误 的 父类 
   |

Error  错误 ：无法通过代码解决。

Exception:异常 。可以通过代码解决的。
        |
    受检异常（非运行时异常）：
             必须处理，否则 编译无法通过。
             Exception类 和 部分子类。
    运行时异常：
         运行时出现的异常。
         可以处理，可以不处理。
         不处理，修改源码；
         处理：异常处理机制，程序不会中断。

          RuntimeException类 和 它的子类。

-------------------------------------------------
异常处理机制：

一、try-cath处理

try{
  可以会出现异常的代码

}catch(异常类类型 变量){
  异常处理代码
}
注意：
  1.没有异常。不执行 catch块
  2.出现了异常，异常类型匹配。 执行catch块处理。
  3.出现了异常，异常类型不匹配。不执行catch块。
二、多重catch形式

try{
  可以会出现异常的代码

}catch(异常类类型 变量){
  异常处理代码
}catch(){

}…………可以有多个 catch块

顺序：
  1.由 常见 到 不常见。
  2.由 简单 到 复杂；
  3.由 子类 到 父类。

好处：
  不同的异常可以不同的处理方式。
-------------------------------------------
三：try-cath-finally

try{
  可以会出现异常的代码

}catch(异常类类型 变量){
  异常处理代码
}finally{
   一定执行的代码。
  //资源的释放  
 
}
不执行 finally的情况：
    System.exit(0);

-----------------------------------------------
四、throws
声明异常

  抛给  调用者 ，
  处理： 1.throws声明 ，
        2.try-catch  (提倡使用)

-----------------------------
五、throw
 自己抛异常

  异常对象类型 是 受检异常，那么必须 throws，调用者必须处理，
                 运行时异常，不用 throws，调用者可以灵活处理。


----------------------------------
六：自定义异常
  继承 自异常类 受检Exception类和子类 或  运行时异常
       RuntimeException类 和 其子类。


-----------------------------------
原则：
 只用于处理非正常的情况；
避免过大的try
使用多重catch
不要忽略catch块儿中的异常
改正代码
文档声明

---------------------------------------
程序调试

 步骤：
   1.猜测出错的位置 加断点；
   2.调试视图单步运行
     F6 单步 跳过，不进入方法
     F5 单步 跳入，进入方法中
   3.F5 和 F6配合使用，找到问题的原因
   4.改正代码
   5.解决问题。















































  
