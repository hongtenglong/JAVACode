
数据类型

基本：值。
                         内存空间
     整数：byte 字节型       1      -128 到 127
          short 短整数类型   2     
          int   整数类型     4
	  long  长整数类型   8

      浮点：float 单精度     4
           double 双精度    8

      字符：char   字符类型  2
      布尔：boolean 布尔类型 

引用：地址。
     字符串  String 
     类类型  class
     数组    []
     接口    interface
     


1,2,367
4.5  7.8
'a' '中''3'
true  false



bit  byte

1b = 8bit 
1kb = 1024b
1mb = 1024Kb
1gb = 1024mb
1tb = 1024gb

-----------------------------------
变量：
  内存中的一个存储空间，值可以改变。

变量的命名规则：
 
标识符命名规则： 
   1.字母，数字，下划线 _ ，$组成；
   2.不能以数字开头；
   3.不能是java的关键字；
   4.不能是字面值 true,false,null
规范：
  骆驼命名
  多个单词组成，第一个单词首字母小写，其后单词首字母大写
-------------------------------------------
各种数据类型需要注意的地方：见代码注释

----------------------------------------------
类型转换：
  类型不同；
  自动类型转换：类型要兼容的。
              范围小的（低） 赋值 给范围大的（高）

  强制类型转换：
           范围大的 赋值给 范围小的
           可以用强制类型转换符 转换，但是数据会有所损失。
           
            语法：（类型）要转换的数据


类型提升原则：前提 运算时
             结果为 类型最高的数据类型
  
----------------------------------------------
运算符

算术运算符：
    +  - * / %取余数
注意： 除数 和 被除数 都是整数结果取整。

------------------------------------------------
自增。自减
一元  前缀   后缀
++    ++a   a++    a = a +1;
--    --a   a--    a = a -1;

后缀：
 赋值运算和输出语句中，先运算或输出 然后 在自增或自减；
前缀：
 赋值运算和输出语句中，先自增或自减 ，然后再 运算或输出。


-------------------------------------------------
关系运算：
  >  <   >=  <=  ==  !=


结果： boolean
-------------------------------------------

逻辑运算

&&  与 
||  或
！  非

&&的运算： 一假false为假 false
||的运算：  一真true为真 true
!的运算：    取反

&& 和 ||
短路 && 和 ||
逻辑运算效率高


&  和 |

位& 和 | 
可以逻辑运算 和 位运算
非短路 & 和 |

-------------------------------------------
扩展赋值运算符

复合
 +=  a += 2; -> a = a + 2;

		short n3 = 5;
		n3 += 5;// n3 = (short)(n3 + 5);
		System.out.println(n3);//10

---------------------------------------------
条件运算符：
？：

boolean ?  true:false;
表达式一？表达式二： 表达式三；
表达式一 结果： true ->表达式二
               false->表达式三的值


-----------------------------------------------
位运算：

&  与
   两个位 同时为1 ，结果是1 ，否则为0 ，

|  或
  两个位 有一个是1，结果就是1.

^ 异或
  相同为 0 ，不同为1

  0 ，0   -》 0
  1， 1   -》 0
  1,0 - 》1
  0,1 -》 1


~  非（反）
  相反 ，0 - 》 1 ， 1 - 》 0

<<  左移
   向左移动 n位 ，右边低位用0补位。

>>  右移
  向右移动 n位 ，左边高位 是什么就用什么补位。

>>>  无符号右移
  向右移动 n位 ，左边高位 用0补位

-------------------------------------------------
优先级：
  ！ > 算术 > 关系 >逻辑 >条件 > 赋值






































 