
使用 构造者 模式 ，通过创建对象 时 链式调用set访问器来初始化。
	public String getSex() {
		return sex;
	}
	public Person setSex(String sex) {
		this.sex = sex;
		return this;
	}
作用：解决了 定义多个 构造器重载 带来的 繁琐语法。



-----------------------------------------------------

包：
 管理 类 和接口 的工具。

 package 包名[.子包名];
 注意：包名：小写的英文字母。
       唯一。 公司的域名反转.部门名.项目名；

 作用：
   1.管理类，文件；
   2.同名的类，文件；
   3.更好的 保护类 和 类中的成员。


不同包下的类访问：
  1.通过导入类型；
      顺序： package;import ;class 
  2.通过完全限定命名；

----------------------------------------------------
访问修饰符：
    
           本类      同包      子类     不同包
private    可以
默认        可以      可以
protected(保护)可以   可以     可以
public     可以       可以     可以      可以


----------------------------------------------------
顶级类 ： public 和 默认

----------------------------------------------------
修饰符 static 

修饰： 属性 ， 方法 ，代码块，类（内部类）

静态成员变量：
  属于 类 ，被所有对象共享，优先 对象 存在。

使用方式：
  对象名.静态变量名；//尽量不用
  类名.静态变量名；//常用

静态 成员 变量  和 实例 成员变量区别：

1.静态 变量 属于 类；
  实例 变量 属于 对象；
2.静态变量 随着类的加载 而加载，存在 方法区中。
  实例变量 随着对象的创建 而创建，存在 堆中；
3.静态变量 随着 类的消亡 而 释放；生命周期长，在
           整个 应用程序运行 过程中一直存在。
  实例变量 随着 对象的 消亡 而 释放；

应用的场合：
   当数据 需要共享时用静态的。




-------------------------------------------------
静态方法：

  注意：
    1.静态方法中 只能直接访问静态成员；
    2.不能使用 this ,super.

场合：
  可以使用 类直接调用，不需要创建对象。
   
静态方法 和 实例方法区别：
 1.静态方法 属于类；
   实例方法 属于对象；
 2.静态方法 只能直接访问 静态成员（静态变量，静态方法）；
   实例方法 可以访问静态成员也可以访问非静态成员；
 3.静态方法中 不能使用 this,super关键字；
  实例方法 可以使用 this,super。

------------------------------------------------------------
修饰代码块：
代码块：
1.构造块
  在类中 直接定义的。
  public class 类{ 
    {
      构造块；//初始化对象 ，自动调用，在创建对象时 new 自动调用，优先构造器调用。
            // 解决 构造器重载时 ，代码重用问题。
    }

  }

2.静态块
  public class 类{

    static{
      静态块；//初始化类 ,给类中 的静态成员赋值
    }

  }

静态变量初始化：

  1.默认初始化；
  2.声明处初始化 
  3. 静态块初始化
  （2,3看代码中的顺序）

顺序：
  1.静态块；
  2.构造块
  3.构造器

----------------------------------------------
静态导入：
 import static  包名.类型名.静态成员；
 import static  包名.类型名.*；


-----------------------------------------------

3.局部代码块

 在方法中定义的。
作用： 控制 局部变量的使用范围 和生命周期。


----------------------------------------------
单例模式：
 饿汉式 ：线程安全的。
 懒汉式：线程非安全的。

----------------------------------------------
程序包：
 java.lang; 核心 System String Math  Thread
 java.util;  Scanner   工具类  集合 
 java.text;  格式化  DecimalFormat
 java.io;    文件 ，流 
 java.net;   网络编程。
 java.sql    数据库

-----------------------------------------------
Math类的

随机数方法：
//公式 [最小值，最大值] 

// (int)(Math.random()*(最大值- 最小值+1)+最小值);


-----------------------------------------------------
Random类

Random r = new Random();
r.nextDouble();//与 Math.random()相同

r.nextInt();// 产生随机整数
r.nextInt(上限);//产生 [0,上限)范围内的一个随机整数，不包括上限。

-----------------------------------------------------





































